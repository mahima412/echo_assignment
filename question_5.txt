Q5) Discuss . Multi-processing and Multi-threading in Python. What is GIL?


 MULTITHREADING:

Thread is an entity within a process that can be scheduled for execution.For simplicity, you can assume that a thread is simply a subset of a process.

Pros

    Lightweight - low memory footprint
    Shared memory - makes access to state from another context easier
    Allows you to easily make responsive UIs
    cPython C extension modules that properly release the GIL will run in parallel
    Great option for I/O-bound applications

Cons

    cPython - subject to the GIL
    Not interruptible/killable
    If not following a command queue/message pump model (using the Queue module), then manual use of synchronization primitives become a necessity (decisions are needed for the granularity of locking)
    Code is usually harder to understand and to get right - the potential for race conditions increases dramatically


MULTIPROCESSESSING:

Multiprocessing refers to the ability of a system to support more than one processor at the same time. Applications in a multiprocessing system are broken to smaller routines that run independently. The operating system allocates these threads to the processors improving performance of the system.

Pros

    Separate memory space
    Code is usually straightforward
    Takes advantage of multiple CPUs & cores
    Avoids GIL limitations for cPython
    Eliminates most needs for synchronization primitives unless if you use shared memory (instead, it's more of a communication model for IPC)
    Child processes are interruptible/killable
    Python multiprocessing module includes useful abstractions with an interface much like threading.Thread
    A must with cPython for CPU-bound processing

Cons

    IPC a little more complicated with more overhead (communication model vs. shared memory/objects)
    Larger memory footprint


GIL:
 
 Python's GIL is intended to serialize access to interpreter internals from different threads. On multi-core systems, it means that multiple threads can't effectively make use of multiple cores. (If the GIL didn't lead to this problem, most people wouldn't care about the GIL - it's only being raised as an issue because of the increasing prevalence of multi-core systems.) 

Note that Python's GIL is only really an issue for CPython, the reference implementation. Jython and IronPython don't have a GIL. As a Python developer, you don't generally come across the GIL unless you're writing a C extension. C extension writers need to release the GIL when their extensions do blocking I/O, so that other threads in the Python process get a chance to run.